# aspnet :: azure-devops

# required variables:
# id, directory, namespace, sonar.key, sonar.name, sonar.version, sonarcloud-login

parameters:
  id: ''

stages:
- stage: build
  displayName: build
  jobs:
  - job: build_aspnet
    displayName: build::aspnet
    pool:
      vmImage: ubuntu-18.04
    steps:
    - task: UseDotNet@2
      displayName: dotnet sdk
      inputs:
        version: 3.1.x
    - script: dotnet tool update --global dotnet-sonarscanner
      displayName: dotnet tool
    - script: dotnet sonarscanner begin /k:"$(sonar.key)" /n:"$(sonar.name)" /o:"revaturexyz" /v:"$(sonar.version)"
        /d:sonar.branch.name=$BUILD_SOURCEBRANCHNAME
        /d:sonar.cs.opencover.reportsPaths=**/TestResults/*/coverage.opencover.xml
        /d:sonar.cs.vstest.reportsPaths=**/*.trx
        /d:sonar.host.url=https://sonarcloud.io/
        /d:sonar.login=$(sonarcloud-login)
      displayName: dotnet sonarscanner::branch
      workingDirectory: $(directory)/src
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    - script: dotnet sonarscanner begin /k:"$(sonar.key)" /n:"$(sonar.name)" /o:"revaturexyz" /v:"$(sonar.version)"
        /d:sonar.cs.opencover.reportsPaths=**/TestResults/*/coverage.opencover.xml
        /d:sonar.cs.vstest.reportsPaths=**/*.trx
        /d:sonar.host.url=https://sonarcloud.io/
        /d:sonar.login=$(sonarcloud-login)
        /d:sonar.pullrequest.base=$SYSTEM_PULLREQUEST_TARGETBRANCH
        /d:sonar.pullrequest.branch=$SYSTEM_PULLREQUEST_SOURCEBRANCH
        /d:sonar.pullrequest.github.repository=$BUILD_REPOSITORY_NAME
        /d:sonar.pullrequest.key=$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER
        /d:sonar.pullrequest.provider=$BUILD_REPOSITORY_PROVIDER
      displayName: dotnet sonarscanner::pull-request
      workingDirectory: $(directory)/src
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    - script: dotnet restore
      displayName: dotnet restore
      workingDirectory: $(directory)/src
    - script: dotnet build --configuration Release --no-incremental --no-restore
      displayName: dotnet build
      workingDirectory: $(directory)/src
    - script: dotnet test
        --settings coverletArgs.runsettings
        --logger trx
        --configuration Release
        --no-build
      displayName: dotnet test
      workingDirectory: $(directory)/src
    - script: dotnet sonarscanner end /d:sonar.login=$(sonarcloud-login)
      displayName: dotnet sonarscanner end
      workingDirectory: $(directory)/src
    - task: PublishTestResults@2
      displayName: publish result::unit-test
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
    - task: PublishCodeCoverageResults@1
      displayName: publish result::code-coverage
      inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: '**/TestResults/*/coverage.cobertura.xml'

- stage: pack
  displayName: pack
  dependsOn: build
  condition: and(succeeded('build'), or(
    eq(variables['Build.SourceBranch'], 'refs/heads/master'),
    startsWith(variables['Build.SourceBranch'], 'refs/tags')))
  jobs:
  - job: pack_aspnet
    displayName: pack::aspnet
    pool:
      vmImage: ubuntu-18.04
    steps:
    - task: DownloadSecureFile@1
      displayName: aspnet appsettings::dev
      name: appconfigdev
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        secureFile: aspnet.${{ parameters.id }}.dev.json
    - task: DownloadSecureFile@1
      displayName: aspnet appsettings::stg
      name: appconfigstg
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
      inputs:
        secureFile: aspnet.${{ parameters.id }}.stg.json
    - task: Docker@2
      displayName: docker login
      inputs:
        command: login
        containerRegistry: revaturexyz-docker
    - script: |
        set -e
        cp $(appconfigdev.secureFilePath) $(directory)/src/Revature.$(namespace).Api/appsettings.json
        docker image build -f .docker/$(directory).dockerfile -t $(directory) ./$(directory)
        docker image tag $(directory) revaturexyz/$(directory):dev
        docker image push revaturexyz/$(directory):dev
      displayName: docker push::dev
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    - script: |
        set -e
        cp $(appconfigstg.secureFilePath) $(directory)/src/Revature.$(namespace).Api/appsettings.json
        docker image build -f .docker/dockerfile -t $(directory) ./$(directory)
        docker image tag $(directory) revaturexyz/$(directory):stg
        docker image push revaturexyz/$(directory):stg
      displayName: docker push::stg
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    - task: Docker@2
      displayName: docker logout
      inputs:
        command: logout
        containerRegistry: revaturexyz-docker
